// Mocks generated by Mockito 5.4.2 from annotations
// in weather_app/test/modules/search/presenter/search/search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/modules/search/domain/entities/weather_data.dart'
    as _i6;
import 'package:weather_app/modules/search/domain/entities/weather_description.dart'
    as _i7;
import 'package:weather_app/modules/search/domain/errors/errors.dart' as _i5;
import 'package:weather_app/modules/search/domain/usecases/search_by_lat_long.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchByLatLong].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchByLatLong extends _i1.Mock implements _i3.SearchByLatLong {
  @override
  _i4.Future<_i2.Either<_i5.SearchFailure, _i6.WeatherData?>> call({
    required String? lat,
    required String? long,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #lat: lat,
            #long: long,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.SearchFailure, _i6.WeatherData?>>.value(
                _FakeEither_0<_i5.SearchFailure, _i6.WeatherData?>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #lat: lat,
              #long: long,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.SearchFailure, _i6.WeatherData?>>.value(
                _FakeEither_0<_i5.SearchFailure, _i6.WeatherData?>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #lat: lat,
              #long: long,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.SearchFailure, _i6.WeatherData?>>);
}

/// A class which mocks [WeatherData].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherData extends _i1.Mock implements _i6.WeatherData {
  @override
  int get dateTime => (super.noSuchMethod(
        Invocation.getter(#dateTime),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get sunrise => (super.noSuchMethod(
        Invocation.getter(#sunrise),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get sunset => (super.noSuchMethod(
        Invocation.getter(#sunset),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  double get temp => (super.noSuchMethod(
        Invocation.getter(#temp),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get feelsLike => (super.noSuchMethod(
        Invocation.getter(#feelsLike),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  int get pressure => (super.noSuchMethod(
        Invocation.getter(#pressure),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get humidity => (super.noSuchMethod(
        Invocation.getter(#humidity),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  double get windSpeed => (super.noSuchMethod(
        Invocation.getter(#windSpeed),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  List<_i7.WeatherDescription> get weatherDescriptionList =>
      (super.noSuchMethod(
        Invocation.getter(#weatherDescriptionList),
        returnValue: <_i7.WeatherDescription>[],
        returnValueForMissingStub: <_i7.WeatherDescription>[],
      ) as List<_i7.WeatherDescription>);
}
